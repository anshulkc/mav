import { BaseDainPlugin } from './base';
export type BlockchainNetwork = 'eth' | 'sol' | 'arb';
export interface WalletInfo {
    chain: BlockchainNetwork;
    address: string;
}
export interface UnsignedTransaction {
    id: string;
    encodedTx: string;
    chain: BlockchainNetwork;
    signer: string;
    metadata?: Record<string, any>;
}
export interface TransactionSignatureRequest {
    txs: UnsignedTransaction[];
}
export interface CryptoPluginConfig {
    supportedChains?: BlockchainNetwork[];
    wallets?: WalletInfo[];
}
export interface CryptoPluginInput {
    wallets: WalletInfo[];
}
export interface CryptoPluginOutput {
    signatureRequests?: TransactionSignatureRequest[];
}
/**
 * CryptoPlugin for handling cryptocurrency transaction workflows
 *
 * This plugin allows services to request transaction signatures from clients
 * by sending back unsigned transactions. Clients can provide their wallet
 * addresses which tools can access and use to create appropriate transactions.
 */
export declare class CryptoPlugin extends BaseDainPlugin<CryptoPluginConfig, CryptoPluginInput, CryptoPluginOutput> {
    id: string;
    name: string;
    version: string;
    description: string;
    type: "both";
    config: CryptoPluginConfig;
    private wallets;
    /**
     * Create a new CryptoPlugin instance
     * @param config Plugin configuration or array of wallet information
     *
     * @example
     * // Initialize with wallet information directly
     * const cryptoPlugin = new CryptoPlugin([
     *   { chain: 'eth', address: '0x1234...' },
     *   { chain: 'sol', address: 'Sol456...' }
     * ]);
     *
     * @example
     * // Initialize with full configuration
     * const cryptoPlugin = new CryptoPlugin({
     *   supportedChains: ['eth', 'sol'],
     *   wallets: [
     *     { chain: 'eth', address: '0x1234...' },
     *     { chain: 'sol', address: 'Sol456...' }
     *   ]
     * });
     */
    constructor(configOrWallets?: CryptoPluginConfig | WalletInfo[]);
    /**
     * Set or update wallet information
     * @param wallets Array of wallet information
     */
    setWallets(wallets: WalletInfo[]): void;
    /**
     * Add a single wallet
     * @param wallet Wallet information to add
     */
    addWallet(wallet: WalletInfo): void;
    /**
     * Get all configured wallets
     * @returns Array of wallet information
     */
    getWallets(): WalletInfo[];
    /**
     * Get plugin input data from a tool context with proper typing
     */
    getInputData(context: any): CryptoPluginInput | undefined;
    /**
     * Get plugin output data from a response with proper typing
     */
    getResponseData(response: any): CryptoPluginOutput | undefined;
    /**
     * Create a standardized response for this plugin with proper typing
     */
    createResponse(data: Partial<CryptoPluginOutput>): CryptoPluginOutput;
    /**
     * Get user wallets from context
     * @param context Tool context
     * @returns Array of wallet information or empty array if none found
     */
    getUserWallets(context: any): WalletInfo[];
    /**
     * Get wallet address for a specific chain
     * @param context Tool context
     * @param chain Blockchain network
     * @returns Wallet address or undefined if not found
     */
    getUserWalletForChain(context: any, chain: BlockchainNetwork): string | undefined;
    /**
     * Helper to create a transaction signature request
     * @param transactions Array of unsigned transactions
     * @returns Properly formatted transaction signature request
     */
    createTransactionRequest(transactions: UnsignedTransaction[]): TransactionSignatureRequest;
    /**
     * Create a single transaction with a unique ID
     * @param transaction Transaction data, ID will be generated if not provided
     * @returns Transaction with a guaranteed unique ID
     */
    createTransaction(transaction: Omit<UnsignedTransaction, 'id'> & {
        id?: string;
    }): UnsignedTransaction;
    /**
     * Get requested transaction signatures from a response
     * @param response Tool response
     * @returns Array of transaction signature requests or empty array if none
     */
    getRequestedCryptoSignatures(response: any): TransactionSignatureRequest[];
    /**
     * Get a specific transaction by ID from all signature requests
     * @param response Tool response
     * @param id Transaction ID to find
     * @returns Transaction or undefined if not found
     */
    getTransactionById(response: any, id: string): UnsignedTransaction | undefined;
    /**
     * Process client input before sending to service
     * Automatically adds wallet information to the request
     */
    processInputClient(input: any): Promise<CryptoPluginInput>;
    /**
     * Process service output before sending to client
     */
    processOutputService(output: any): Promise<CryptoPluginOutput>;
    /**
     * Process client output after receiving service response
     */
    processOutputClient(output: any): Promise<any>;
    /**
     * Process service input before handling the request
     */
    processInputService(input: any): Promise<any>;
}
